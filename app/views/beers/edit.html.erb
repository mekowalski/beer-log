<h3>Edit Beer</h3>

<%= form_for @beer do |f| %>
  <% if @beer.errors.any? %>
  <div id="error_explanation">
    <h2>
      <%= pluralize(@beer.errors.count, 'error') %>
      stopped this beer from being saved
    </h2>
    <ul>
      <% @beers.errors.full_messages.each do |message| %>
      <li><%= message %></li>
      <% end %>
    </ul>
  </div>
  <% end %>

  <div class="field<%= 'field_with_errors' if @beer.errors[:name].any? %>">
    <label>Name:</label>
    <%= f.text_field :name %>
  </div><br><br>

  <div class="field<%= 'field_with_errors' if @beer.errors[:description].any? %>">
    <label>Description:</label>
    <%= f.text_area :description %>
  </div><br><br>

  <div class="field<%= 'field_with_errors' if @beer.errors[:abv].any? %>">
    <label>ABV(Alcohol by Volume):</label>
    <%= f.text_field :abv %>
  </div><br><br>

  <div class="field<%= 'field_with_errors' if @beer.errors[:location].any? %>">
    <label>Location:</label>
    <%= f.text_field :location %>
  </div><br><br>

  <%= f.submit %>

<% end %>

<!--
-refactor edit form from FORM_TAG to FORM_FOR
-acces to @post instance var and pass that to form_for
-also remove path arg & method,
-form_for is smart enough to set that and know to utilize PUT dealing w/ pre-existing record
-|f|: iterator var used on new form obj to allow dynamic assign form field elements to each beer data attr
-no longer have to pass ed values manually
-passing attr as a :symbol, automatically tells form field what model attr to associate with

PUT vs PATCH
PUT: ability to update entires object
PATCH: simply updates elements that were changed
 -->
